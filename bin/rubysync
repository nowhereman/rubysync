#!/usr/bin/env ruby -w
#
#  Copyright (c) 2007 Ritchie Young. All rights reserved.
#
# This file is part of RubySync.
# 
# RubySync is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
# 
# RubySync is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with RubySync; if not, write to the
# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA

lib_path = File.dirname(__FILE__) + '/../lib'
$:.unshift lib_path unless $:.include?(lib_path) || $:.include?(File.expand_path(lib_path))
require "ruby_sync"
require "simpleconsole"


class Controller < SimpleConsole::Controller

  include RubySync::Utilities
  
  params :string => {:p => :pipe},
         :string => {:t => :type},
         :bool =>{:v => :verbose}
  
  def default
  end
  
  def example
  end
  
  # Run specified pipeline once then exit
  def once
    log.level = (params[:verbose])? Logger::INFO : Logger::WARN
    
    pipeline_name = params[:id]
    pipeline = pipeline_called pipeline_name
    if pipeline
      pipeline.run_once
    else
      log.error "Couldn't find a pipeline called '#{pipeline_name}'"
    end
  end

  def create
    config_path = params[:id]
    ensure_dir_exists config_path
    ensure_dir_exists config_path + "/pipelines"
    ensure_dir_exists config_path + "/connectors"  
  end
  
  def connector
    name = params[:id]
    type = params[:type]
    unless name and type
      puts "Usage: rubysync connector connector_name -t connector_type"
      return
    end
    if base_path
      File.open("#{base_path}/connectors/#{name}_connector.rb", "w") do |file|
        file.puts connector_template(name, type)
      end
    else
      puts 'Change into a config dir and try again or create a config dir with "rubysync create"'
    end
  end
  
  def pipeline
    name = params[:id]
    unless name
      puts "Usage: rubysync pipeline pipeline_name"
      return
    end
    if base_path
      File.open("#{base_path}/pipelines/#{name}_pipeline.rb", "w") do |file|
        file.puts pipeline_template(name)
      end
    else
      puts 'Change into a config dir and try again or create a config dir with "rubysync create"'
    end
  end
  
  
end


class View < SimpleConsole::View

  def default
    puts "Usage: rubysync command -p pipename"
    
    puts <<END
Valid commands are:

  create {name}           ; Create a rubysync configuration directory

  connector {name} -t {type} ; Create a connector of the given name in
                          ; the current rubysync configuration directory

  pipeline {name}         ; Create a rubysync pipeline of the given name
                          ; in the current rubysync configuration directory
                          
  once {name}             ; Execute the named pipeline within the current
                          ; configuration directory once and then exit
                          
  example                 ; Show and example of how this command might be used
END
end

def example
  puts <<END                          
  Example:
  
  This sets up the skeleton of a configuration for provisioning the your LDAP
  server from your HR system database.

  $ rubysync create my_ims
  $ cd my_ims
  $ rubysync connector corp_directory -t ldap
  $ rubysync connector hr_db -t active_record
  $ rubysync pipeline hr_import

  You would then edit the files:
  
    connectors/corp_directory_connector.rb  ; how to connect to corp ldap
    connectors/hr_db_connector.rb           ; how to connect to HR database
    pipelines/hr_import_pipeline.rb         ; Policy for synchronizing
                                            ; between connectors
                                            
  You may then execute the pipeline in one-shot mode (daemon mode is coming):
  
  $ rubysync once hr_import
                                            
END
end
  
  def start
    puts "Not yet implemented"
  end

end


  def connector_template name, type
    type_class_name = "RubySync::Connectors::#{type.to_s.camelize}Connector"
    type_class = eval(type_class_name)
    sample_config = (type_class && type_class.respond_to?("sample_config")) ?
      type_class.sample_config : ""
    return <<-"end;"
class #{name.to_s.camelize}Connector < #{type_class_name}
  #{sample_config}
end
    end;
  end
  
  def pipeline_template name
    return <<-"end;"
class #{name.to_s.camelize}Pipeline < RubySync::Pipelines::BasePipeline

  #client :client_connector_name

  #vault :vault_connector_name

  #allow_out :allow, :these, :fields

  # in means going from client to vault
  #in_transform do
  #end

  # out means going from vault to client
  #out_transform do
  #end

end
    end;
  end


SimpleConsole::Application.run(ARGV, Controller, View)
